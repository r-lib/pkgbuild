% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build.R
\name{build}
\alias{build}
\title{Build package}
\usage{
build(
  path = ".",
  dest_path = NULL,
  binary = FALSE,
  vignettes = TRUE,
  manual = FALSE,
  clean_doc = NULL,
  args = NULL,
  quiet = FALSE,
  needs_compilation = pkg_has_src(path),
  compile_attributes = FALSE,
  register_routines = FALSE
)
}
\arguments{
\item{path}{Path to a package, or within a package.}

\item{dest_path}{Path in which to produce package. If it is an existing
directory, then the output file is placed in \code{dest_path} and named
according to the current R conversions (e.g. \code{.zip} for Windows binary
packages, \code{.tgz} for macOS binary packages, etc).
If it is an existing file, then it will be overwritten.
If \code{dest_path} does not exist, then it is used as a file name.
If \code{NULL}, it defaults to the parent directory of the package.}

\item{binary}{Produce a binary (\code{--binary}) or source (
\code{--no-manual --no-resave-data}) version of the package.}

\item{vignettes, manual}{For source packages: if \code{FALSE}, don't build PDF
vignettes (\code{--no-build-vignettes}) or manual (\code{--no-manual}).}

\item{clean_doc}{If \code{TRUE}, clean the files in \code{inst/doc} before building
the package. If \code{NULL} and interactive, ask to remove the
files prior to cleaning. In most cases, cleaning the files is the correct
behavior to avoid stale vignette outputs in the built package.}

\item{args}{An optional character vector of additional command
line arguments to be passed to \code{"R CMD build"} if \code{binary = FALSE},
or \code{"R CMD install"} if \code{binary = TRUE}.}

\item{quiet}{If \code{TRUE}, suppresses output from this function.}

\item{needs_compilation}{Usually only needed if the package has
C/C++/Fortran code. By default, this is autodetected.}

\item{compile_attributes}{If \code{TRUE} and the package uses Rcpp/cpp11, call
\code{\link[Rcpp:compileAttributes]{Rcpp::compileAttributes()}}/\code{\link[cpp11:cpp_register]{cpp11::cpp_register()}} before building the
package. It is ignored if package does not need compilation.}

\item{register_routines}{If \code{TRUE} and the package does not use Rcpp/cpp11,
call register routines with
\code{tools::package_native_routine_registration_skeleton()} before building the
package. It is ignored if package does not need compilation.}
}
\value{
A string giving the location (including file name) of the built
package.
}
\description{
Building converts a package source directory into a single bundled file.
If \code{binary = FALSE} this creates a \code{tar.gz} package that can
be installed on any platform, provided they have a full development
environment (although packages without source code can typically be
installed out of the box). If \code{binary = TRUE}, the package will have
a platform specific extension (e.g. \code{.zip} for windows), and will
only be installable on the current platform, but no development
environment is needed.
}
